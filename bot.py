import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiohttp import web

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ Render
CHANNEL_ID = "-1001324681912"
CHANNEL_LINK = "https://t.me/lebedevamariiatgm"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ @gigtestibot...")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot=bot)
app = web.Application()  # WSGI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è gunicorn

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    print(f"START: –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üì¢", url=CHANNEL_LINK)],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ", callback_data="check_subscription")]
    ])
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ì–∏–≥—Ç–µ—Å—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è check_subscription
@dp.callback_query(lambda c: c.data == "check_subscription")
async def process_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    print(f"CHECK_SUB: Callback –æ—Ç {user_id}: {callback.data}")
    try:
        print(f"CHECK_SUB: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è user_id={user_id} –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}")
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        print(f"CHECK_SUB: –°—Ç–∞—Ç—É—Å: {member.status}")
        if member.status in ["member", "administrator", "creator"]:
            await bot.send_message(user_id, "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É. –î–µ—Ä–∂–∏ —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Ç–µ—Å—Ç—ã: https://docs.google.com/document/d/1wRpzasug5kSagNZgtG2QlSRMyK-7PP3ZYvNcejoDkoo/edit?usp=sharing")
        else:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üì¢", url=CHANNEL_LINK)]
            ])
            await bot.send_message(user_id, "üòî –£–ø—Å. –ö–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å!", reply_markup=markup)
        await callback.answer()
    except Exception as e:
        print(f"CHECK_SUB: –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        await bot.send_message(user_id, "üòì –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await callback.answer("–û—à–∏–±–∫–∞")

# Webhook –∏ health check
async def webhook(request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.process_update(update)
        return web.json_response({"status": "ok"})
    except Exception as e:
        print(f"Webhook –æ—à–∏–±–∫–∞: {e}")
        return web.json_response({"status": "error"}, status=500)

async def health(request):
    return web.json_response({"status": "healthy"})

app.router.add_post(f"/webhook/{API_TOKEN}", webhook)
app.router.add_get("/health", health)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(_):
    WEBHOOK_URL = f"https://gigtest-bot.onrender.com/webhook/{API_TOKEN}"
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è @gigtestibot")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def start_app():
    try:
        await on_startup(None)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        port = int(os.getenv("PORT", 10000))
        print(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        return app  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è gunicorn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise

# Gunicorn –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(start_app())